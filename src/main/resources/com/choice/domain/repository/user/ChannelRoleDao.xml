<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.choice.domain.repository.user.ChannelRoleDao" >
  <resultMap id="BaseResultMap" type="com.choice.domain.entity.user.ChannelRole" >
    <id column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="add_time" property="addTime" jdbcType="TIMESTAMP" />
    <result column="add_person" property="addPerson" jdbcType="INTEGER" />
    <result column="edit_time" property="editTime" jdbcType="TIMESTAMP" />
    <result column="edit_person" property="editPerson" jdbcType="INTEGER" />
    <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    role_id, role_name, remark, add_time, add_person, edit_time, edit_person, is_delete, 
    flag
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from channel_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from channel_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.choice.domain.entity.user.ChannelRole" >
    insert into channel_role (role_id, role_name, remark, 
      add_time, add_person, edit_time, 
      edit_person, is_delete, flag
      )
    values (#{roleId,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, 
      #{addTime,jdbcType=TIMESTAMP}, #{addPerson,jdbcType=INTEGER}, #{editTime,jdbcType=TIMESTAMP}, 
      #{editPerson,jdbcType=INTEGER}, #{isDelete,jdbcType=INTEGER}, #{flag,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.choice.domain.entity.user.ChannelRole" >
    insert into channel_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="addTime != null" >
        add_time,
      </if>
      <if test="addPerson != null" >
        add_person,
      </if>
      <if test="editTime != null" >
        edit_time,
      </if>
      <if test="editPerson != null" >
        edit_person,
      </if>
      <if test="isDelete != null" >
        is_delete,
      </if>
      <if test="flag != null" >
        flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="addTime != null" >
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="addPerson != null" >
        #{addPerson,jdbcType=INTEGER},
      </if>
      <if test="editTime != null" >
        #{editTime,jdbcType=TIMESTAMP},
      </if>
      <if test="editPerson != null" >
        #{editPerson,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null" >
        #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.choice.domain.entity.user.ChannelRole" >
    update channel_role
    <set >
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="addTime != null" >
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="addPerson != null" >
        add_person = #{addPerson,jdbcType=INTEGER},
      </if>
      <if test="editTime != null" >
        edit_time = #{editTime,jdbcType=TIMESTAMP},
      </if>
      <if test="editPerson != null" >
        edit_person = #{editPerson,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null" >
        is_delete = #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=INTEGER},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.choice.domain.entity.user.ChannelRole" >
    update channel_role
    set role_name = #{roleName,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      add_person = #{addPerson,jdbcType=INTEGER},
      edit_time = #{editTime,jdbcType=TIMESTAMP},
      edit_person = #{editPerson,jdbcType=INTEGER},
      is_delete = #{isDelete,jdbcType=INTEGER},
      flag = #{flag,jdbcType=INTEGER}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <select id="getList" parameterType="com.choice.domain.entity.user.ChannelRole" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List"></include>
  		from channel_role
  			<where>
  				is_delete = 0
  				<if test="roleName != null and roleName != ''">
  					AND role_name like CONCAT(CONCAT('%',#{roleName}),'%')
  				</if>
  			</where>
  </select>
  <delete id="deleteRoles">
  	update	channel_role SET  is_delete = 1 where role_id in
  	<foreach collection="array" index="index" item="item"
            open="(" separator="," close=")">
            #{item}
    </foreach>
  </delete>
  <select id="getRolesByUserId" resultType="map">
	SELECT  a.role_id AS roleId,a.role_name AS `name`,flag,
		(CASE WHEN b.user_id IS NULL THEN 0 ELSE 1 END
		)AS checked
			FROM
				channel_role a LEFT JOIN channel_user_role b ON a.role_id = b.role_id AND b.user_id = #{id}
					WHERE a.is_delete = 0 and 
					a.role_level &gt;= 
				(
					SELECT MIN(a.role_level) AS role_level FROM channel_role a
					INNER JOIN channel_user_role b
					ON a.role_id = b.role_id
					INNER JOIN channel_user c
					ON b.user_id = c.user_id
					WHERE c.user_id = #{loginUserId}
				)
				ORDER BY a.role_level ASC
  </select>
  <select id="getRoleByUserId" resultMap='BaseResultMap' parameterType='INTEGER'>
  	SELECT 
  	c.role_id, c.role_name, c.remark, c.add_time, c.add_person, c.edit_time, c.edit_person, c.is_delete, c.flag
  	FROM channel_user a
	INNER JOIN channel_user_role b
	ON a.user_id = b.user_id
	INNER JOIN channel_role c
	ON b.role_id = c.role_id
	WHERE a.user_id = #{id,jdbcType=INTEGER}
	ORDER BY c.role_level ASC 
	LIMIT 1
  </select>
</mapper>