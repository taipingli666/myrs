<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     ">
	<!-- 注解驱动  -->
	<context:annotation-config />
	<context:component-scan base-package="com.choice.domain.service" />
	<!-- dbconfig  -->
	<bean id = "propertyConfigurer" class ="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >    
       <property name = "locations" >    
           <list >    
                 <value>classpath:/dbconfig.properties </value>    
            </list>    
        </property>    
    </bean>
	<bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">    
       <!-- 数据库基本信息配置 -->  
       <property name = "url" value = "${url}" />    
       <property name = "username" value = "${username}" />    
       <property name = "password" value = "${password}" />    
       <property name = "driverClassName" value = "${driverClassName}" />    
       <property name = "filters" value = "${filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />    
       <property name = "validationQuery" value = "${validationQuery}" />    
       <property name = "testWhileIdle" value = "${testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${testOnBorrow}" />    
       <property name = "testOnReturn" value = "${testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${logAbandoned}" />  
  	</bean>  
  	<!-- 事务  -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven />
	<!-- sqlSessionFactory  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
       <property name="plugins">  
        <array>  
            <bean class="com.github.pagehelper.PageHelper">  
                <property name="properties">  
                    <!--使用下面的方式配置参数，一行配置一个 -->  
                    <value>  
                        dialect=mysql
                    </value>  
                </property>  
            </bean>  
        </array>  
    	</property>  
       <property name="dataSource" ref="dataSource" />   
       <property name="mapperLocations" value="classpath:com/choice/domain/repository/*.xml" />  
       <property name="typeAliasesPackage" value="com.choice.domain.repository.entity;com.choice.dto;com.choice.domain.entity;" />
    </bean>	 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property> 
       <property name="basePackage" value="com.choice.domain.repository" />  
    </bean>
    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
</beans>
